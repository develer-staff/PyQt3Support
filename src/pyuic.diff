--- pyuic/uic/Compiler/compiler.py
+++ pyuic/uic/Compiler/compiler.py
@@ -52,7 +52,7 @@
 class UICompiler(UIParser):
     def __init__(self):
         UIParser.__init__(self, qtproxies.QtCore, qtproxies.QtGui,
-                CompilerCreatorPolicy())
+                qtproxies.Qt3Support, CompilerCreatorPolicy())
 
     def reset(self):
         qtproxies.i18n_strings = []
@@ -65,7 +65,7 @@
         indenter = getIndenter()
         indenter.level = 0
 
-        indenter.write("from PyQt4 import QtCore, QtGui")
+        indenter.write("from PyQt4 import QtCore, QtGui, Qt3Support")
         indenter.write("")
 
         indenter.write("try:")
@@ -128,4 +128,7 @@
 
         return {"widgetname": str(w),
                 "uiclass" : w.uiclass,
-                "baseclass" : w.baseclass}
+                "baseclass" : w.baseclass,
+                "baseclassmod" : ("QtGui" if not w.baseclass.startswith("Q3")
+                                  else "Qt3Support"),
+                }
--- pyuic/uic/Compiler/qobjectcreator.py
+++ pyuic/uic/Compiler/qobjectcreator.py
@@ -46,7 +46,7 @@
     from sets import Set as set
 
 from PyQt4.uic.Compiler.indenter import write_code
-from PyQt4.uic.Compiler.qtproxies import QtGui, Literal, strict_getattr
+from PyQt4.uic.Compiler.qtproxies import QtGui, Qt3Support, Literal, strict_getattr
 
 
 logger = logging.getLogger(__name__)
@@ -62,6 +62,14 @@
 
     search = staticmethod(search)
 
+class _Qt3SupportWrapper(object):
+    def search(clsname):
+        try:
+            return strict_getattr(Qt3Support, clsname)
+        except AttributeError:
+            return None
+
+    search = staticmethod(search)
 
 class _ModuleWrapper(object):
     def __init__(self, name, classes):
@@ -144,6 +152,9 @@
     def createQtGuiWrapper(self):
         return _QtGuiWrapper
 
+    def createQt3SupportWrapper(self):
+        return _Qt3SupportWrapper
+
     def createModuleWrapper(self, name, classes):
         mw = _ModuleWrapper(name, classes)
         self._modules.append(mw)
--- pyuic/uic/Compiler/qtproxies.py
+++ pyuic/uic/Compiler/qtproxies.py
@@ -425,3 +425,43 @@
     for _class in _qwidgets:
         if _class not in locals():
             locals()[_class] = type(_class, (QWidget, ), {})
+
+
+class Qt3Support(ProxyNamespace):
+    class Q3Header(QtGui.QWidget): pass
+    class Q3Accel(QtCore.QObject): pass
+
+    class Q3Action(QtCore.QObject): pass
+    class Q3ActionGroup(Q3Action): pass
+
+    class Q3DockArea(QtGui.QWidget): pass
+
+    class Q3Frame(QtGui.QWidget): pass
+    class Q3DockWindow(Q3Frame): pass
+    class Q3ToolBar(Q3DockWindow): pass
+    class Q3Grid(Q3Frame): pass
+    class Q3HBox(Q3Frame): pass
+    class Q3VBox(Q3HBox): pass
+    class Q3ScrollView(Q3Frame): pass
+    class Q3ListView(Q3ScrollView): pass
+    class Q3Table(Q3ScrollView):
+        def horizontalHeader(self):
+            return Qt3Support.Q3Header("%s.horizontalHeader()" % (self),
+                    False, (), noInstantiation=True)
+        def verticalHeader(self):
+            return Qt3Support.Q3Header("%s.verticalHeader()" % (self),
+                    False, (), noInstantiation=True)
+
+    class Q3ListBox(Q3ScrollView): pass
+    class Q3TextEdit(Q3ScrollView): pass
+
+    class Q3MainWindow(QtGui.QWidget): pass
+    class Q3PopupMenu(QtGui.QWidget): pass
+    class Q3StyleSheet(QtCore.QObject): pass
+
+    class Q3GroupBox(QtGui.QGroupBox): pass
+    class Q3ButtonGroup(Q3GroupBox): pass
+
+    class Q3DateTimeEditBase(QtGui.QWidget): pass
+    class Q3DateEdit(Q3DateTimeEditBase): pass
+    class Q3TimeEdit(Q3DateTimeEditBase): pass
--- pyuic/uic/driver.py
+++ pyuic/uic/driver.py
@@ -110,10 +110,7 @@
     def on_NoSuchWidgetError(self, e):
         """ Handle a NoSuchWidgetError exception. """
 
-        if e.args[0].startswith("Q3"):
-            sys.stderr.write("Error: Q3Support widgets are not supported by PyQt4.\n")
-        else:
-            sys.stderr.write(str(e) + "\n")
+        sys.stderr.write(str(e) + "\n")
 
     def on_Exception(self, e):
         """ Handle a generic exception. """
--- pyuic/uic/__init__.py
+++ pyuic/uic/__init__.py
@@ -48,7 +48,7 @@
 # Form implementation generated from reading ui file '%s'
 #
 # Created: %s
-#      by: PyQt4 UI code generator %s
+#      by: PyQt4+Qt3Support UI code generator %s
 #
 # WARNING! All changes made in this file will be lost!
 
@@ -56,9 +56,10 @@
 
 
 _pyqt3_wrapper_code = """
-class %(widgetname)s(QtGui.%(baseclass)s, %(uiclass)s):
+class %(widgetname)s(%(baseclassmod)s.%(baseclass)s, %(uiclass)s):
 \tdef __init__(self, parent=None, f=QtCore.Qt.WindowFlags()):
-\t\tQtGui.%(baseclass)s.__init__(self, parent, f)
+\t\t%(baseclassmod)s.%(baseclass)s.__init__(self, parent)
+\t\tif f: self.setWindowFlags(f)
 
 \t\tself.setupUi(self)
 """
--- pyuic/uic/Loader/qobjectcreator.py
+++ pyuic/uic/Loader/qobjectcreator.py
@@ -40,7 +40,7 @@
 
 import sys
 
-from PyQt4 import QtGui
+from PyQt4 import QtGui, Qt3Support
 
 
 class _QtGuiWrapper(object):
@@ -49,6 +49,11 @@
     search = staticmethod(search)
 
 
+class _Qt3SupportWrapper(object):
+    def search(cls):
+        return getattr(Qt3Support, cls, None)
+    search = staticmethod(search)
+
 class _ModuleWrapper(object):
     def __init__(self, moduleName, classes):
         self._moduleName = moduleName
@@ -121,6 +126,9 @@
     def createQtGuiWrapper(self):
         return _QtGuiWrapper
     
+    def createQt3SupportWrapper(self):
+        return _Qt3SupportWrapper
+
     def createModuleWrapper(self, moduleName, classes):
         return _ModuleWrapper(moduleName, classes)
     
--- pyuic/uic/objcreator.py
+++ pyuic/uic/objcreator.py
@@ -65,7 +65,8 @@
         self._cpolicy = creatorPolicy
 
         self._cwFilters = []
-        self._modules = [self._cpolicy.createQtGuiWrapper()]
+        self._modules = [self._cpolicy.createQtGuiWrapper(),
+                         self._cpolicy.createQt3SupportWrapper()]
 
         # Get the optional plugins.
         for plugindir in widgetPluginPath:
--- pyuic/uic/properties.py
+++ pyuic/uic/properties.py
@@ -75,10 +75,11 @@
 
 
 class Properties(object):
-    def __init__(self, factory, QtCore_mod, QtGui_mod):
-        global QtGui, QtCore
+    def __init__(self, factory, QtCore_mod, QtGui_mod, Qt3Support_mod):
+        global QtGui, QtCore, Qt3Support
         QtGui = QtGui_mod
         QtCore = QtCore_mod
+        Qt3Support = Qt3Support_mod
         self.factory = factory
 
         self._base_dir = ''
--- pyuic/uic/uiparser.py
+++ pyuic/uic/uiparser.py
@@ -123,13 +123,16 @@
 
 
 class UIParser(object):    
-    def __init__(self, QtCoreModule, QtGuiModule, creatorPolicy):
+    def __init__(self, QtCoreModule, QtGuiModule, Qt3SupportModule,
+                 creatorPolicy):
         self.factory = QObjectCreator(creatorPolicy)
-        self.wprops = Properties(self.factory, QtCoreModule, QtGuiModule)
+        self.wprops = Properties(self.factory, QtCoreModule, QtGuiModule,
+                                 Qt3SupportModule)
         
-        global QtCore, QtGui
+        global QtCore, QtGui, Qt3Support
         QtCore = QtCoreModule
         QtGui = QtGuiModule
+        Qt3Support = Qt3SupportModule
         
         self.reset()
 
@@ -304,10 +307,10 @@
         elif isinstance(topwidget, (QtGui.QDockWidget, QtGui.QScrollArea)):
             topwidget.setWidget(widget)
             
-        elif isinstance(topwidget, QtGui.QMainWindow):
+        elif isinstance(topwidget, (QtGui.QMainWindow, Qt3Support.Q3MainWindow)):
             if type(widget) == QtGui.QWidget:
                 topwidget.setCentralWidget(widget)
-            elif isinstance(widget, QtGui.QToolBar):
+            elif isinstance(widget, (QtGui.QToolBar, Qt3Support.Q3ToolBar)):
                 tbArea = self.wprops.getAttribute(elem, "toolBarArea")
 
                 if tbArea is None:
@@ -324,7 +327,7 @@
                 topwidget.setMenuBar(widget)
             elif isinstance(widget, QtGui.QStatusBar):
                 topwidget.setStatusBar(widget)
-            elif isinstance(widget, QtGui.QDockWidget):
+            elif isinstance(widget, (QtGui.QDockWidget, Qt3Support, Q3DockArea)):
                 dwArea = self.wprops.getAttribute(elem, "dockWidgetArea")
                 topwidget.addDockWidget(QtCore.Qt.DockWidgetArea(dwArea),
                         widget)
@@ -584,6 +587,9 @@
                         row, col)
                 w.setItem(row, col, item)
 
+            else:
+                raise NotImplementedError("handleItem() for %s" % type(w).__name__)
+
             self.item_nr += 1
 
     def addAction(self, elem):
@@ -716,6 +722,31 @@
                     w.setVerticalHeaderItem(self.row_counter, item)
                     self.row_counter += 1
 
+        elif isinstance(w, Qt3Support.Q3Table):
+            if len(elem) == 0:
+                return
+
+            text = self.wprops.getProperty(elem, "text")
+            icon = self.wprops.getProperty(elem, "icon")
+
+            if elem.tag == "column":
+                if icon:
+                    w.horizontalHeader().setLabel(self.column_counter, icon, text)
+                else:
+                    w.horizontalHeader().setLabel(self.column_counter, text)
+
+                self.column_counter += 1
+            elif elem.tag == "row":
+                if icon:
+                    w.verticalHeader().setLabel(self.row_counter, icon, text)
+                else:
+                    w.verticalHeader().setLabel(self.row_counter, text)
+
+                self.row_counter += 1
+
+        else:
+            raise NotImplementedError("addHeader() for %s" % type(w).__name__)
+
     def createAction(self, elem):
         self.setupObject("QAction", self.currentActionGroup or self.toplevelWidget,
                          elem)
@@ -888,8 +919,6 @@
     
         for custom_widget in iter(elem):
             classname = custom_widget.findtext("class")
-            if classname.startswith("Q3"):
-                raise NoSuchWidgetError(classname)
             self.factory.addCustomWidget(classname,
                                      custom_widget.findtext("extends") or "QWidget",
                                      header2module(custom_widget.findtext("header")))
